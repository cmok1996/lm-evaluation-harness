{
    "results": {
        "bbh_zeroshot_subset": {
            "exact_match,flexible-extract": 0.5862068965517241,
            "exact_match_stderr,flexible-extract": 0.09121863614530692,
            "alias": "bbh_zeroshot_subset"
        },
        "bbh_zeroshot_boolean_expressions": {
            "alias": " - bbh_zeroshot_boolean_expressions",
            "exact_match,strict-match": 0.8,
            "exact_match_stderr,strict-match": 0.19999999999999998,
            "exact_match,flexible-extract": 0.8,
            "exact_match_stderr,flexible-extract": 0.19999999999999998
        },
        "bbh_zeroshot_causal_judgement": {
            "alias": " - bbh_zeroshot_causal_judgement",
            "exact_match,strict-match": 0.75,
            "exact_match_stderr,strict-match": 0.25,
            "exact_match,flexible-extract": 0.75,
            "exact_match_stderr,flexible-extract": 0.25
        },
        "bbh_zeroshot_formal_fallacies": {
            "alias": " - bbh_zeroshot_formal_fallacies",
            "exact_match,strict-match": 0.2,
            "exact_match_stderr,strict-match": 0.2,
            "exact_match,flexible-extract": 0.2,
            "exact_match_stderr,flexible-extract": 0.2
        },
        "bbh_zeroshot_logical_deduction_five_objects": {
            "alias": " - bbh_zeroshot_logical_deduction_five_objects",
            "exact_match,strict-match": 0.4,
            "exact_match_stderr,strict-match": 0.24494897427831783,
            "exact_match,flexible-extract": 0.4,
            "exact_match_stderr,flexible-extract": 0.24494897427831783
        },
        "bbh_zeroshot_navigate": {
            "alias": " - bbh_zeroshot_navigate",
            "exact_match,strict-match": 0.8,
            "exact_match_stderr,strict-match": 0.19999999999999998,
            "exact_match,flexible-extract": 0.8,
            "exact_match_stderr,flexible-extract": 0.19999999999999998
        },
        "bbh_zeroshot_object_counting": {
            "alias": " - bbh_zeroshot_object_counting",
            "exact_match,strict-match": 0.6,
            "exact_match_stderr,strict-match": 0.24494897427831783,
            "exact_match,flexible-extract": 0.6,
            "exact_match_stderr,flexible-extract": 0.24494897427831783
        }
    },
    "groups": {
        "bbh_zeroshot_subset": {
            "exact_match,flexible-extract": 0.5862068965517241,
            "exact_match_stderr,flexible-extract": 0.09121863614530692,
            "alias": "bbh_zeroshot_subset"
        }
    },
    "group_subtasks": {
        "bbh_zeroshot_subset": [
            "bbh_zeroshot_boolean_expressions",
            "bbh_zeroshot_causal_judgement",
            "bbh_zeroshot_formal_fallacies",
            "bbh_zeroshot_logical_deduction_five_objects",
            "bbh_zeroshot_navigate",
            "bbh_zeroshot_object_counting"
        ]
    },
    "configs": {
        "bbh_zeroshot_boolean_expressions": {
            "task": "bbh_zeroshot_boolean_expressions",
            "dataset_path": "lukaemon/bbh",
            "dataset_name": "boolean_expressions",
            "test_split": "test",
            "doc_to_text": "Question: {{input}}\nAnswer with only the result, no explanations needed. Choose ONLY one of the following result: True, False. \nAnswer:",
            "doc_to_target": "{{target}}",
            "unsafe_code": false,
            "description": "Evaluate the result of a random Boolean expression.\n\n",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "exact_match",
                    "aggregation": "mean",
                    "higher_is_better": true,
                    "ignore_case": true,
                    "regexes_to_ignore": [
                        "\\.$",
                        ",",
                        "\n",
                        "\\\\",
                        "\""
                    ]
                }
            ],
            "output_type": "generate_until",
            "generation_kwargs": {
                "until": [
                    "</s>",
                    "Q:",
                    "<|im_end|>"
                ],
                "do_sample": false,
                "temperature": 0.0,
                "max_gen_toks": 8
            },
            "repeats": 1,
            "filter_list": [
                {
                    "name": "strict-match",
                    "filter": [
                        {
                            "function": "take_first"
                        }
                    ]
                },
                {
                    "name": "flexible-extract",
                    "filter": [
                        {
                            "function": "regex",
                            "group_select": 0,
                            "regex_pattern": "\\b(True|False)\\b"
                        },
                        {
                            "function": "take_first"
                        }
                    ]
                }
            ],
            "should_decontaminate": false,
            "metadata": {
                "version": 3.0
            }
        },
        "bbh_zeroshot_causal_judgement": {
            "task": "bbh_zeroshot_causal_judgement",
            "dataset_path": "lukaemon/bbh",
            "dataset_name": "causal_judgement",
            "test_split": "test",
            "doc_to_text": "Question: {{input}}\nAnswer with only the result, no explanations needed. Choose ONLY one of the following result: Yes, No. \nAnswer:",
            "doc_to_target": "{{target}}",
            "unsafe_code": false,
            "description": "Answer questions about causal attribution.\n\n",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "exact_match",
                    "aggregation": "mean",
                    "higher_is_better": true,
                    "ignore_case": true,
                    "regexes_to_ignore": [
                        "\\.$",
                        ",",
                        "\n",
                        "\\\\",
                        "\""
                    ]
                }
            ],
            "output_type": "generate_until",
            "generation_kwargs": {
                "until": [
                    "</s>",
                    "Q:",
                    "<|im_end|>"
                ],
                "do_sample": false,
                "temperature": 0.0,
                "max_gen_toks": 8
            },
            "repeats": 1,
            "filter_list": [
                {
                    "name": "strict-match",
                    "filter": [
                        {
                            "function": "take_first"
                        }
                    ]
                },
                {
                    "name": "flexible-extract",
                    "filter": [
                        {
                            "function": "regex",
                            "group_select": 0,
                            "regex_pattern": "\\b(Yes|No|yes|no)\\b"
                        },
                        {
                            "function": "take_first"
                        }
                    ]
                }
            ],
            "should_decontaminate": false,
            "metadata": {
                "version": 3.0
            }
        },
        "bbh_zeroshot_formal_fallacies": {
            "task": "bbh_zeroshot_formal_fallacies",
            "dataset_path": "lukaemon/bbh",
            "dataset_name": "formal_fallacies",
            "test_split": "test",
            "doc_to_text": "Question: {{input}}\nAnswer with only the result, no explanations needed. Choose ONLY one of the following result: valid, invalid. \nAnswer:",
            "doc_to_target": "{{target}}",
            "unsafe_code": false,
            "description": "Distinguish deductively valid arguments from formal fallacies.\n\n",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "exact_match",
                    "aggregation": "mean",
                    "higher_is_better": true,
                    "ignore_case": true,
                    "regexes_to_ignore": [
                        "\\.$",
                        ",",
                        "\n",
                        "\\\\",
                        "\""
                    ]
                }
            ],
            "output_type": "generate_until",
            "generation_kwargs": {
                "until": [
                    "</s>",
                    "Q:",
                    "<|im_end|>"
                ],
                "do_sample": false,
                "temperature": 0.0,
                "max_gen_toks": 8
            },
            "repeats": 1,
            "filter_list": [
                {
                    "name": "strict-match",
                    "filter": [
                        {
                            "function": "take_first"
                        }
                    ]
                },
                {
                    "name": "flexible-extract",
                    "filter": [
                        {
                            "function": "regex",
                            "group_select": 0,
                            "regex_pattern": "\\b(valid|invalid)\\b"
                        },
                        {
                            "function": "take_first"
                        }
                    ]
                }
            ],
            "should_decontaminate": false,
            "metadata": {
                "version": 3.0
            }
        },
        "bbh_zeroshot_logical_deduction_five_objects": {
            "task": "bbh_zeroshot_logical_deduction_five_objects",
            "dataset_path": "lukaemon/bbh",
            "dataset_name": "logical_deduction_five_objects",
            "test_split": "test",
            "doc_to_text": "Question: {{input}}\nAnswer with only the result, no explanations needed. Choose ONLY one of the following result: (A), (B), (C), (D), (E). \nAnswer:",
            "doc_to_target": "{{target}}",
            "unsafe_code": false,
            "description": "A logical deduction task which requires deducing the order of a sequence of objects.\n\n",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "exact_match",
                    "aggregation": "mean",
                    "higher_is_better": true,
                    "ignore_case": true,
                    "regexes_to_ignore": [
                        "\\.$",
                        ",",
                        "\n",
                        "\\\\",
                        "\""
                    ]
                }
            ],
            "output_type": "generate_until",
            "generation_kwargs": {
                "until": [
                    "</s>",
                    "Q:",
                    "<|im_end|>"
                ],
                "do_sample": false,
                "temperature": 0.0,
                "max_gen_toks": 8
            },
            "repeats": 1,
            "filter_list": [
                {
                    "name": "strict-match",
                    "filter": [
                        {
                            "function": "take_first"
                        }
                    ]
                },
                {
                    "name": "flexible-extract",
                    "filter": [
                        {
                            "function": "<class 'utils.MultiChoiceRegexFilter'>",
                            "group_select": 0,
                            "ignore_case": true,
                            "ignore_punctuation": true,
                            "regex_pattern": "(\\([A-Z]\\))"
                        },
                        {
                            "function": "take_first"
                        }
                    ]
                }
            ],
            "should_decontaminate": false,
            "metadata": {
                "version": 3.0
            }
        },
        "bbh_zeroshot_navigate": {
            "task": "bbh_zeroshot_navigate",
            "dataset_path": "lukaemon/bbh",
            "dataset_name": "navigate",
            "test_split": "test",
            "doc_to_text": "Question: {{input}}\nAnswer with only the result, no explanations needed. Choose ONLY one of the following result: Yes, No. \nAnswer:",
            "doc_to_target": "{{target}}",
            "unsafe_code": false,
            "description": "Given a series of navigation instructions, determine whether one would end up back at the starting point.\n\n",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "exact_match",
                    "aggregation": "mean",
                    "higher_is_better": true,
                    "ignore_case": true,
                    "regexes_to_ignore": [
                        "\\.$",
                        ",",
                        "\n",
                        "\\\\",
                        "\""
                    ]
                }
            ],
            "output_type": "generate_until",
            "generation_kwargs": {
                "until": [
                    "</s>",
                    "Q:",
                    "<|im_end|>"
                ],
                "do_sample": false,
                "temperature": 0.0,
                "max_gen_toks": 8
            },
            "repeats": 1,
            "filter_list": [
                {
                    "name": "strict-match",
                    "filter": [
                        {
                            "function": "take_first"
                        }
                    ]
                },
                {
                    "name": "flexible-extract",
                    "filter": [
                        {
                            "function": "regex",
                            "group_select": 0,
                            "regex_pattern": "\\b(Yes|No|yes|no)\\b"
                        },
                        {
                            "function": "take_first"
                        }
                    ]
                }
            ],
            "should_decontaminate": false,
            "metadata": {
                "version": 3.0
            }
        },
        "bbh_zeroshot_object_counting": {
            "task": "bbh_zeroshot_object_counting",
            "dataset_path": "lukaemon/bbh",
            "dataset_name": "object_counting",
            "test_split": "test",
            "doc_to_text": "Question: {{input}}\nAnswer with only the result, no explanations needed. \nAnswer:",
            "doc_to_target": "{{target}}",
            "unsafe_code": false,
            "description": "Questions that involve enumerating objects and asking the model to count them.\n\n",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "exact_match",
                    "aggregation": "mean",
                    "higher_is_better": true,
                    "ignore_case": true,
                    "regexes_to_ignore": [
                        "\\.$",
                        ",",
                        "\n",
                        "\\\\",
                        "\""
                    ]
                }
            ],
            "output_type": "generate_until",
            "generation_kwargs": {
                "until": [
                    "</s>",
                    "Q:",
                    "<|im_end|>"
                ],
                "do_sample": false,
                "temperature": 0.0,
                "max_gen_toks": 8
            },
            "repeats": 1,
            "filter_list": [
                {
                    "name": "strict-match",
                    "filter": [
                        {
                            "function": "take_first"
                        }
                    ]
                },
                {
                    "name": "flexible-extract",
                    "filter": [
                        {
                            "function": "<class 'utils.NumberParseRegexFilter'>",
                            "group_select": 0,
                            "regex_pattern": "([-0-9]+)"
                        },
                        {
                            "function": "take_first"
                        }
                    ]
                }
            ],
            "should_decontaminate": false,
            "metadata": {
                "version": 3.0
            }
        }
    },
    "versions": {
        "bbh_zeroshot_boolean_expressions": 3.0,
        "bbh_zeroshot_causal_judgement": 3.0,
        "bbh_zeroshot_formal_fallacies": 3.0,
        "bbh_zeroshot_logical_deduction_five_objects": 3.0,
        "bbh_zeroshot_navigate": 3.0,
        "bbh_zeroshot_object_counting": 3.0,
        "bbh_zeroshot_subset": 3.0
    },
    "n-shot": {
        "bbh_zeroshot_boolean_expressions": 0,
        "bbh_zeroshot_causal_judgement": 0,
        "bbh_zeroshot_formal_fallacies": 0,
        "bbh_zeroshot_logical_deduction_five_objects": 0,
        "bbh_zeroshot_navigate": 0,
        "bbh_zeroshot_object_counting": 0
    },
    "higher_is_better": {
        "bbh_zeroshot_boolean_expressions": {
            "exact_match": true
        },
        "bbh_zeroshot_causal_judgement": {
            "exact_match": true
        },
        "bbh_zeroshot_formal_fallacies": {
            "exact_match": true
        },
        "bbh_zeroshot_logical_deduction_five_objects": {
            "exact_match": true
        },
        "bbh_zeroshot_navigate": {
            "exact_match": true
        },
        "bbh_zeroshot_object_counting": {
            "exact_match": true
        },
        "bbh_zeroshot_subset": {
            "exact_match": true
        }
    },
    "n-samples": {
        "bbh_zeroshot_boolean_expressions": {
            "original": 250,
            "effective": 5
        },
        "bbh_zeroshot_causal_judgement": {
            "original": 187,
            "effective": 4
        },
        "bbh_zeroshot_formal_fallacies": {
            "original": 250,
            "effective": 5
        },
        "bbh_zeroshot_logical_deduction_five_objects": {
            "original": 250,
            "effective": 5
        },
        "bbh_zeroshot_navigate": {
            "original": 250,
            "effective": 5
        },
        "bbh_zeroshot_object_counting": {
            "original": 250,
            "effective": 5
        }
    },
    "config": {
        "model": "local-completions",
        "model_args": {
            "pretrained": "qwen2.5:1.5b-instruct-q4_K_M",
            "base_url": "http://localhost:11434/v1/completions",
            "tokenized_requests": false,
            "tokenizer_backend": null
        },
        "batch_size": "auto",
        "batch_sizes": [],
        "device": "cuda:0",
        "use_cache": null,
        "limit": 0.02,
        "bootstrap_iters": 100000,
        "gen_kwargs": null,
        "random_seed": 0,
        "numpy_seed": 1234,
        "torch_seed": 1234,
        "fewshot_seed": 1234
    },
    "git_hash": "3bc7cc8a",
    "date": 1755583472.3271756,
    "pretty_env_info": "PyTorch version: 2.7.0+cu126\nIs debug build: False\nCUDA used to build PyTorch: 12.6\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.5 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: 14.0.0-1ubuntu1.1\nCMake version: Could not collect\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, May 27 2025, 17:12:29) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-5.15.0-151-generic-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.6.20\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: Tesla V100-PCIE-32GB\nNvidia driver version: 560.28.03\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.5\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.9.5\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.9.5\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.9.5\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.9.5\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.9.5\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.9.5\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                            x86_64\nCPU op-mode(s):                          32-bit, 64-bit\nAddress sizes:                           45 bits physical, 48 bits virtual\nByte Order:                              Little Endian\nCPU(s):                                  8\nOn-line CPU(s) list:                     0-7\nVendor ID:                               GenuineIntel\nModel name:                              Intel(R) Xeon(R) Gold 6254 CPU @ 3.10GHz\nCPU family:                              6\nModel:                                   85\nThread(s) per core:                      1\nCore(s) per socket:                      1\nSocket(s):                               8\nStepping:                                7\nBogoMIPS:                                6185.46\nFlags:                                   fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon nopl xtopology tsc_reliable nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced fsgsbase tsc_adjust bmi1 avx2 smep bmi2 invpcid avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves arat pku ospke avx512_vnni md_clear flush_l1d arch_capabilities\nHypervisor vendor:                       VMware\nVirtualization type:                     full\nL1d cache:                               256 KiB (8 instances)\nL1i cache:                               256 KiB (8 instances)\nL2 cache:                                8 MiB (8 instances)\nL3 cache:                                198 MiB (8 instances)\nNUMA node(s):                            1\nNUMA node0 CPU(s):                       0-7\nVulnerability Gather data sampling:      Unknown: Dependent on hypervisor status\nVulnerability Indirect target selection: Mitigation; Aligned branch/return thunks\nVulnerability Itlb multihit:             KVM: Mitigation: VMX unsupported\nVulnerability L1tf:                      Not affected\nVulnerability Mds:                       Not affected\nVulnerability Meltdown:                  Not affected\nVulnerability Mmio stale data:           Vulnerable: Clear CPU buffers attempted, no microcode; SMT Host state unknown\nVulnerability Reg file data sampling:    Not affected\nVulnerability Retbleed:                  Mitigation; Enhanced IBRS\nVulnerability Spec rstack overflow:      Not affected\nVulnerability Spec store bypass:         Mitigation; Speculative Store Bypass disabled via prctl and seccomp\nVulnerability Spectre v1:                Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:                Mitigation; Enhanced / Automatic IBRS; IBPB conditional; PBRSB-eIBRS SW sequence; BHI SW loop, KVM SW loop\nVulnerability Srbds:                     Not affected\nVulnerability Tsx async abort:           Not affected\n\nVersions of relevant libraries:\n[pip3] numpy==2.1.3\n[pip3] nvidia-cublas-cu12==12.6.4.1\n[pip3] nvidia-cuda-cupti-cu12==12.6.80\n[pip3] nvidia-cuda-nvrtc-cu12==12.6.77\n[pip3] nvidia-cuda-runtime-cu12==12.6.77\n[pip3] nvidia-cudnn-cu12==9.5.1.17\n[pip3] nvidia-cufft-cu12==11.3.0.4\n[pip3] nvidia-curand-cu12==10.3.7.77\n[pip3] nvidia-cusolver-cu12==11.7.1.2\n[pip3] nvidia-cusparse-cu12==12.5.4.2\n[pip3] nvidia-cusparselt-cu12==0.6.3\n[pip3] nvidia-nccl-cu12==2.26.2\n[pip3] nvidia-nvjitlink-cu12==12.6.85\n[pip3] nvidia-nvtx-cu12==12.6.77\n[pip3] onnx==1.17.0\n[pip3] optree==0.14.1\n[pip3] torch==2.7.0\n[pip3] torchaudio==2.7.0\n[pip3] torchvision==0.22.0\n[pip3] triton==3.3.0\n[conda] Could not collect",
    "transformers_version": "4.51.3",
    "upper_git_hash": null,
    "model_backend": "local-completions",
    "start_time": 1755583472.3271408,
    "end_time": 1755583493.8575222,
    "total_evaluation_time_seconds": 21.530381441116333
}